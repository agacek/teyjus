#summary Signature Matching

= Matching a Module with its Signature =

The process of matching a signature with the declarations in the source file, i.e. the file with extension .mod, has three essential effects:

    * It makes sure that the types for (global) constants and the arities for (global) type constructors that are defined in the module agree with what is expected of them in the signature.
    * It identifies the final list of global and local constants, sorts and type constructors corresponding to the module.
    * It ensures that the useonly restrictions on predicates are satisfied by the code in the module. 

The broad manner of processing is the following. First, all type and kind declarations in a module are processed to extract lists of global and local constant, sort and type constructor declarations. The global lists are enhanced by the declarations in accumulated signatures and in the signatures of imported modules. The global lists are further enhanced by global declarations in accumulated modules. The locally or implicitly declared constants, kinds and type constructors in such modules are added as new objects of these categories distinct from any other symbols that are or will be encountered in processing. The global lists are now filtered by the lists obtained from the signature for this module, with the eliminated objects going to relevant local lists. At each stage in this processing, the declared type and arity of objects in a given category having identical names in any given context must match.

The simplified signature of global and local sorts, type constructors and constants is used to analyze the clauses in the module. In the process, new constants may be encountered and these may be added to the relevant local lists. The inference of types for undeclared constants may also be supported by this process. A check must be made in the course of processing clauses to ensure that useonly predicates do not have defining clauses either at the top-level or in the antecedents of implication goals. 
