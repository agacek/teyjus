#summary Some formula manipulating programs in Teyjus

= Some Formula Manipulating Programs in Teyjus =

The code accessible from this page illustrates the use of higher-order abstract syntax as it is supported in Lambda Prolog in representing and manipulating formulas in quantificational logic. One component to understand here is the way formulas are encoded. Three manipulation tasks are also considered and these illustrate the benefits of beta reduction in realizing substitution into formulas, of higher-order unification in probing formula structure and of the new scoping primitives in Lambda Prolog in carrying out computations over abstraction structure. The menu below provides some help in understanding the structure of the code. All of the code listed here is available in the distribution of Teyjus under `examples/handbook/logic`.

 * Term encodings for formulas in a first order logic
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/logic_types.sig     Types for basic categories of expressions]
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/logic_basic.sig      Constants representing logical symbols]
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/logic_vocab.sig      Constants representing a few non-logical symbols]

 * Implementing a Horn clause logic interpreter
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hc_interp.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hc_interp.mod code] for the interpreter
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hcinterp_examples.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hcinterp_examples.sig  code] for a testing harness

 * Analyzing formula structure
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/refl_syntax.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/refl_syntax.mod code] for recognizing terms and quantifier free formulas
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hc_syntax.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hc_syntax.mod code] for recognizing goals and clauses in Horn clause logic
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hcsyntax_examples.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/hcsyntax_examples.mod code] for a testing harness

 * Analysis and synthesis of formula structure
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/pnf.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/pcf.mod code] for a transformer to prenex normal form
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/pnf_examples.sig Signature] and [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/pnf_examples.mod code] for a testing harness

 *  Scripts illustrating the use of the code
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/script1 Horn clause interpreter]
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/script2 Recognizers for formula categories]
    * [http://teyjus.googlecode.com/svn/trunk/examples/handbook/logic/script3 Prenex normal form transformer]

The code in this directory is adapted by Gopalan Nadathur from material in the paper "Higher-Order Logic Programming" by Gopalan Nadathur and Dale Miller.